type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity {
  id: Bytes!
  from: Account!
  to: Account!
  value: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  isMint: Boolean!
  isBurn: Boolean!
}

type Account @entity {
  id: Bytes!
  balance: BigDecimal!
  transfersFrom: [Transfer!]! @derivedFrom(field: "from")
  transfersTo: [Transfer!]! @derivedFrom(field: "to")
  lastTransactionTimestamp: BigInt!
  isMinter: Boolean!
}

type DailyMetric @entity {
  id: Bytes!
  date: String!
  transferCount: BigInt! # Simplified name
  activeUsers: BigInt! # Simplified name
  volume: BigDecimal! # Simplified name
  mintVolume: BigDecimal!
  burnVolume: BigDecimal!
  averageTransferValue: BigDecimal!
  largestTransfer: BigDecimal!
  uniqueMinters: BigInt!
}

type HourlyMetric @entity {
  id: Bytes!
  hour: String!
  transferCount: BigInt!
  activeUsers: BigInt!
  volume: BigDecimal!
  mintVolume: BigDecimal!
  burnVolume: BigDecimal!
  averageTransferValue: BigDecimal!
}

type Token @entity {
  id: Bytes!
  symbol: String!
  name: String!
  decimals: Int!
  totalSupply: BigDecimal!
  transferCount: BigInt!
  holderCount: BigInt!
  lastUpdateTimestamp: BigInt!
  owner: Bytes! # Changed from String to Bytes for consistency
  minters: [Minter!]! @derivedFrom(field: "token")
}

type Minter @entity {
  id: Bytes!
  address: Bytes!
  token: Token!
  addedAt: BigInt!
  removedAt: BigInt
  isActive: Boolean!
  mintedAmount: BigDecimal!
  mintCount: BigInt!
  addTransactionHash: Bytes!
  removeTransactionHash: Bytes
}